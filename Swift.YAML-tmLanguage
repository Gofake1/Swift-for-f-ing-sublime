# [PackageDev] target_format: plist, ext: tmLanguage
name: Swift
scopeName: source.swift
fileTypes: [swift]
uuid: 66529EE0-35DE-11E4-8C21-0800200C9A66

patterns:
  - include: '#statement'
  - match: ^\s*$

repository:
    comment:
        patterns:
          - name: comment.line.mark.swift
            match: \s*(// *MARK:).*\n?$
          - name: comment.line.swift
            match: \s*//.*$
          - name: comment.multiline.swift
            begin: "/\\*"
            end: "\\*/"
            patterns:
              - include: '#comment'

    generic-parameter-clause:
        patterns:
          - include: '#comment'

          - name: type.requirement.swift
            match: \b(where)\b
            captures:
                '1': {name: keyword.where.swift}

          - name: variable.parameter.type.swift
            match: |
                (?x)
                ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                | `[_a-zA-Z][_a-zA-Z0-9]*`
                )

          - name: type.ascription.swift
            begin: ":"
            end: '(?=[,>]|\bwhere\b)'
            patterns:
              - include: '#type'

          - name: keyword.operator.swift
            match: "=="

    modifiers:
        patterns:
          - name: declaration-modifier.swift
            match: |
                (?x)
                \b
                (?:
                    (class|convenience|dynamic|final|infix|lazy|mutating|nonmutating|optional|override
                    |postfix|prefix|required|static|weak)\b
                |   (unowned) (?:\s*(\()\s*((?:un)?safe)\s*(\))|\b)
                |   (internal|private|public) (?:\s*(\()\s*(set)\s*(\))|\b)
                )
            captures:
                '1': {name: keyword.other.declmod.swift}
                '2': {name: keyword.other.declmod.swift}
                '3': {name: punctuation.other.swift}
                '4': {name: keyword.other.declmod.swift}
                '5': {name: punctuation.other.swift}
                '6': {name: keyword.other.accessmod.swift}
                '7': {name: punctuation.other.swift}
                '8': {name: keyword.other.accessmod.swift}
                '9': {name: punctuation.other.swift}

    declaration:
        patterns:
          - include: '#comment'

          - include: '#attribute'

          - name: import-declaration.swift
            match: |
                (?x)
                \b(import)\s+
                (?:
                  (typealias|struct|class|enum|protocol|var|func)\s+
                )?
                ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                | `[_a-zA-Z][_a-zA-Z0-9]*`
                | [-/=+!*%<>&|^~]+
                | \?\?
                | \.\.<
                | \.\.+
                )
                (?:
                    \.
                    ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                    | `[_a-zA-Z][_a-zA-Z0-9]*`
                    | [-/=+!*%<>&|^~]+
                    | \.\.<
                    | \.\.+
                    )
                )*

            captures:
                '1': {name: keyword.other.swift}
                '2': {name: keyword.other.swift}
                '3': {name: support.other.module.swift}
                '4': {name: support.other.module.swift}

          - name: function-declaration.swift
            begin: |
                (?x)
                \b
                (?<!\.)
                (?:
                    (func)\s+
                    ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                    | `[_a-zA-Z][_a-zA-Z0-9]*`
                    | [-/=+!*%<>&|^~]+?(?=\s*[<(][^-/=+!*%<>&|^~ ])
                    )
                |   (init)\b
                |   (deinit)\b
                |   (subscript)\b
                )

            beginCaptures:
                '1': {name: keyword.func.swift}
                '2': {name: entity.name.function.swift}
                '3': {name: keyword.init.swift}
                '4': {name: keyword.deinit.swift}
                '5': {name: keyword.subscript.swift}
            end: (?=\{)|$
            patterns:
              - name: generic-parameter-clause.swift
                begin: "<(?![-/=+!*%<>&|^~]+)"
                end: ">"
                patterns:
                  - include: '#generic-parameter-clause'

              - name: function-result.swift
                begin: "->"
                beginCaptures:
                    '0': {name: keyword.arrow.swift}
                end: (?=[{;])|$
                patterns:
                  - include: '#type'

              - name: parameter-clause.swift
                begin: \(
                end: \)
                patterns:
                  - name: parameter.swift
                    match: |
                        (?x)
                        (?:\b(inout)\s+)?
                        (?:\b(?:(let)|(var))\s+)?
                        (?:[#])?
                        (?:
                            ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                            | `[_a-zA-Z][_a-zA-Z0-9]*`
                            )
                            \s+
                        )?
                        ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                        | `[_a-zA-Z][_a-zA-Z0-9]*`
                        )
                        \s*
                    captures:
                        '1': {name: keyword.inout.swift}
                        '2': {name: keyword.let.swift}
                        '3': {name: keyword.var.swift}
                        '4': {name: support.function.external-name.swift}
                        '5': {name: variable.parameter.swift}

                  - name: default-argument-clause.swift
                    begin: "="
                    end: ",|(?=[=)])"
                    patterns:
                      - include: '#expression'

                  - name: type-annotation.swift
                    begin: ":"
                    end: ",|(?=[=)])"
                    patterns:
                      - include: '#type'

          - name: constant-declaration.swift
            begin: \b(let)\s+
            beginCaptures:
                '1': {name: keyword.let.swift}
            end: (?<!,)(?=\s*$)
            patterns:
              - name: pattern-initializer.swift
                begin: "="
                end: "(?=,)|$"
                patterns:
                  - include: '#expression'

              - name: let-type-ascription.swift
                begin: ":"
                end: (?=[,=])|$
                patterns:
                  - include: '#type'

              - name: variable.swift
                match: |
                    (?x)
                    \b
                    ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                    | `[_a-zA-Z][_a-zA-Z0-9]*`
                    )
                    \s*
                    (?=:)
                captures:
                    '1': {name: variable.swift}

              - include: '#pattern'


          - name: variable-declaration.swift
            begin: |
                (?x)
                \b
                (var)\s+
                ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                | `[_a-zA-Z][_a-zA-Z0-9]*`
                )
                \s*
                (?::|(?==))
            beginCaptures:
                '1': {name: keyword.other.binding.swift}
                '2': {name: variable.swift}
            end: '=|$'
            patterns:
              - include: '#type'
              - begin: \{
                end: \}
                patterns:
                  - include: '#attribute'

                  - name: getter-setter-keyword.swift
                    match: \b(get)|(set)|(didSet)|(willSet)\b
                    captures:
                        '1': {name: keyword.get.swift}
                        '2': {name: keyword.set.swift}
                        '3': {name: keyword.didSet.swift}
                        '4': {name: keyword.willSet.swift}

                  - name: getter-setter-block.swift
                    begin: \{
                    end: \}
                    patterns:
                      - include: '#statement'

                  - include: '#statement'

          - name: struct-class-protocol-extension-declaration.swift
            begin: |
                (?x)
                \b
                (?:(struct)|(class)|(protocol)|(extension))\s+
                (?!class|deinit|enum|extension|func|import|init|internal|let|operator|private|protocol
                |public|static|struct|subscript|typealias|var|break|case|continue|default|do|else
                |fallthrough|for|if|in|return|switch|where|while|as|dynamicType|false|is|nil|self|Self
                |super|true|__COLUMN__|__FILE__|__FUNCTION__|and __LINE__)
                ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                | `[_a-zA-Z][_a-zA-Z0-9]*`
                )
                \s*
            beginCaptures:
                '1': {name: keyword.struct.swift}
                '2': {name: keyword.class.swift}
                '3': {name: keyword.protocol.swift}
                '4': {name: keyword.extension.swift}
                '5': {name: entity.name.class.declaration.swift}
            end: (?<=\})
            patterns:
              - name: generic-parameter-clause.swift
                begin: "<"
                end: ">"
                patterns:
                  - include: '#generic-parameter-clause'
              - name: body.structure.swift
                begin: \{
                end: \}
                patterns:
                  - include: '#statement'
              - match: "[:,]"
              - include: '#type'

          - name: enum-declaration.swift
            begin: |
                (?x)
                \b
                (enum)\s+
                ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                | `[_a-zA-Z][_a-zA-Z0-9]*`
                )
                \s*
            beginCaptures:
                '1': {name: keyword.other.binding.swift}
                '2': {name: entity.name.class.declaration.swift}
            end: (?<=\})
            patterns:
              - begin: "<"
                end: ">"
                patterns:
                  - include: '#generic-parameter-clause'

              - name: body.enum.swift
                begin: \{
                end: \}
                patterns:
                  - name: declaration.case.swift
                    begin: \b(case)\s+
                    beginCaptures:
                        '1': {name: keyword.case.swift}
                    end: (?<!,)(?=\s*(?:\}|$))
                    patterns:
                      - match: ","

                      - name: enum-case.swift
                        match: |
                            (?x)
                            ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                            | `[_a-zA-Z][_a-zA-Z0-9]*`
                            )
                            (?!\s*[(=])
                        captures:
                            '1': {name: entity.name.class.enumcase.swift}

                      - name: raw-value-style-enum-case.swift
                        begin: |
                            (?x)
                            ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                            | `[_a-zA-Z][_a-zA-Z0-9]*`
                            )
                            \s*
                            =
                        beginCaptures:
                            '1': {name: entity.name.class.enumcase.swift}
                        end: (?=[,}]|$)
                        patterns:
                          - include: '#expression'

                      - name: union-style-enum-case-tuple.swift
                        begin: |
                            (?x)
                            ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                            | `[_a-zA-Z][_a-zA-Z0-9]*`
                            )
                            \s*\(
                        beginCaptures:
                            '1': {name: entity.name.class.enumcase.swift}
                        end: \)
                        patterns:
                          - name: keyword.other.swift
                            match: \binout\b

                          - match: ","

                          - name: support.type.identifier.swift
                            match: |
                                (?x)
                                \b
                                ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                                | `[_a-zA-Z][_a-zA-Z0-9]*`
                                )
                                \s*
                                :
                            captures:
                                '1': {name: variable.parameter.type.swift}

                          - include: '#type'

                  - include: '#statement'


              - match: "[:,]"

              - include: '#type'

          - name: typealias-declaration.swift
            begin: |
                (?x)
                \b
                (typealias)
                \s+
                ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                | `[_a-zA-Z][_a-zA-Z0-9]*`
                )
                \s*(?:=|$)
            beginCaptures:
                '1': {name: keyword.typealias.swift}
                '2': {name: entity.name.type.swift}
            end: ";|$"
            patterns:
              - include: '#type'

          - include: '#modifiers'

    identifier-pattern:
        patterns:
          - name: variable.swift
            match: |
                (?x)
                (?!\b(?:as|is|let|var)\b)
                ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                | `[_a-zA-Z][_a-zA-Z0-9]*`
                )

          - include: '#pattern'

    pattern:
        patterns:
          - include: '#comment'

          - name: variable.parameter.swift
            match: \b_\b

          - name: keyword.as.swift
            begin: \bas\s+
            end: (?=\bas|[=,:]|\))
            patterns:
              - include: '#type'

          - name: keyword.is.swift
            begin: \bis\s+
            end: (?=\bas|[=,:]|\))
            patterns:
              - include: '#type'

          - name: variable-pattern.swift
            match: |
                (?x)
                \b
                (var)\s+
                ( \b[_a-zA-Z][_a-zA-Z0-9]*
                | `[_a-zA-Z][_a-zA-Z0-9]*`
                )?
            captures:
                '1': {name: keyword.var.swift}
                '2': {name: variable.swift}

          - name: keyword.let.swift
            match: |
                (?x)
                \b
                (let)\s+
                ( \b[_a-zA-Z][_a-zA-Z0-9]*
                | `[_a-zA-Z][_a-zA-Z0-9]*`
                )?
            captures:
                '1': {name: keyword.let.swift}
                '2': {name: variable.swift}

          - name: enum-case-pattern.swift
            match: |
                (?x)
                ( \b[_a-zA-Z][_a-zA-Z0-9]*
                | `[_a-zA-Z][_a-zA-Z0-9]*`
                )?
                \.
                ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                | `[_a-zA-Z][_a-zA-Z0-9]*`
                )
            captures:
                '1': {name: support.type.identifier.swift}
                '2': {name: support.function.swift}

          - name: support.type.identifier
            match: |
                (?x)
                ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                | `[_a-zA-Z][_a-zA-Z0-9]*`
                )

          - name: tuple-pattern.swift
            begin: \(
            end: \)
            patterns:
              - include: '#identifier-pattern'

              - match: ','

          - include: '#expression'

    expression:
        patterns:
          - include: '#comment'

          - include: '#literal'

          - name: generic-argument-clause.swift
            begin: |
                (?x)(?<![.-/=+!*%<>&|^~])<(?!\s|[-/=+!*%<>&|^~]+)
            end: ">"
            patterns:
              - include: '#type'

          - name: keyword.operator.swift
            match: |
                (?x)
                (?!/\*|\*/|//
                |(?:[(){}.,;@#`]|\[|\])[^-/=+!*%<>&|^~]
                )
                ( [-/=+!*%<>&|^~]+
                | \?\?
                | \.\.<
                | \.\.+
                )

          - name: expression.generic-application.swift
            begin: |
                (?x)
                (?:
                    \b
                    (init)
                |
                    \b
                    ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                    | `[_a-zA-Z][_a-zA-Z0-9]*`
                    )
                |
                    \[
                    \s*
                    ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                    | `[_a-zA-Z][_a-zA-Z0-9]*`
                    )
                    (?:
                        \s*,\s*
                        ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                        | `[_a-zA-Z][_a-zA-Z0-9]*`
                        )
                    )*
                    \]
                )
                \s*
                (?=\<[^ -/=+!*%<>&|^~])
            beginCaptures:
                '1': {name: keyword.init.swift}
                '2': {name: support.function.swift}
                '3': {name: support.type.identifier.swift}
                '4': {name: support.type.identifier.swift}
            end: (?<=\))|(?=\{)
            patterns:
              - name: generic-argument-clause.swift
                begin: "<(?![-/=+!*%<>&|^~]+)"
                end: ">"
                patterns:
                  - include: "#type"

              - name: parameter-clause.swift
                begin: \(
                end: \)
                patterns:
                  - name: expression-element.swift
                    match: |
                        (?x)
                        \b
                        ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                        | `[_a-zA-Z][_a-zA-Z0-9]*`
                        )
                        \s*:
                    captures:
                        '1': {name: support.function.swift}

                  - include: "#expression"

          - name: expression.application.swift
            begin: |
                (?x)
                (?:
                    \b
                    (init)
                |
                    \b
                    ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                    | `[_a-zA-Z][_a-zA-Z0-9]*`
                    )
                |
                    \[
                    \s*
                    ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                    | `[_a-zA-Z][_a-zA-Z0-9]*`
                    )
                    (?:
                        \s*,\s*
                        ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                        | `[_a-zA-Z][_a-zA-Z0-9]*`
                        )
                    )*
                    \]
                )
                \s*
                \(
            beginCaptures:
                '1': {name: keyword.init.swift}
                '2': {name: support.function.swift}
                '3': {name: support.type.identifier.swift}
                '4': {name: support.type.identifier.swift}
            end: \)
            patterns:
              - name: expression-element.swift
                match: |
                    (?x)
                    \b
                    ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                    | `[_a-zA-Z][_a-zA-Z0-9]*`
                    )
                    \s*:
                captures:
                    '1': {name: support.function.swift}
              - include: '#expression'

          # - name: expression.closure-application.swift
          #   match: |
          #       (?x)
          #       (?:
          #           \b
          #           (init)
          #       |
          #           \b
          #           ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
          #           | `[_a-zA-Z][_a-zA-Z0-9]*`
          #           )
          #       |
          #           \[
          #           \s*
          #           ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
          #           | `[_a-zA-Z][_a-zA-Z0-9]*`
          #           )
          #           (?:
          #               \s*,\s*
          #               ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
          #               | `[_a-zA-Z][_a-zA-Z0-9]*`
          #               )
          #           )*
          #           \]
          #       )
          #       (?=\s*\{)
          #   captures:
          #       '1': {name: keyword.init.swift}
          #       '2': {name: support.function.swift}
          #       '3': {name: support.type.identifier.swift}
          #       '4': {name: support.type.identifier.swift}

          - name: keyword.self.swift
            match: \b(self)\b

          - name: keyword.dynamicType.swift
            match: \b(dynamicType)\b

          - name: keyword.super.swift
            match: \b(super)\b

          - name: expression.type.swift
            begin: |
                (?x)
                \b(is|as\??)
                \s+
            beginCaptures:
                '1': {name: keyword.typeascription.swift}
                '2': {name: keyword.operator.type.swift}
            end: (?=\s|\]|[\),])|$
            patterns:
              - include: '#type'

          - match: ","

          - name: body.sexpr.swift
            begin: \(
            end: \)
            patterns:
              - include: '#expression'

          - name: closure-expression.swift
            begin: \{
            end: \}
            patterns:
              - name: closure-signature.swift
                begin: (?<=\{)\s*\(
                end: (?=\bin\b)
                patterns:
                  - name: variable.parameter.untyped.swift
                    match: |
                        (?x)
                        (?<=[,\(])
                        \s*
                        ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                        | `[_a-zA-Z][_a-zA-Z0-9]*`
                        )
                        \s*
                        (?=[,\)])
                    captures:
                        '1': {name: variable.parameter.type.swift}

                  - include: "#tuple-type"

              - name: closure-body.swift
                begin: \b(in)\s+
                beginCaptures:
                    '1': {name: keyword.in.swift}
                end: (?=\})
                patterns:
                  - include: '#statement'

              - include: '#statement'

          - name: expression.array.swift
            begin: \[
            end: \]
            patterns:
              - include: '#expression'

          - name: conditional-operator.swift
            begin: (?<=\s)(\?)(?=[^-/=+!*%<>&|^~])\s*
            beginCaptures:
                '1': {name: keyword.operator.swift}
            end: ":"
            endCaptures:
                '0': {name: keyword.operator.swift}
            patterns:
              - include: '#expression'

    balanced-tokens:
        patterns:
          - include: '#comment'

          - name: balanced-token-paren.swift
            begin: \(
            end: \)
            patterns:
              - include: '#balanced-tokens'

          - name: balanced-token-bracket.swift
            begin: \[
            end: \]
            patterns:
              - include: '#balanced-tokens'

          - name: balanced-token-brace.swift
            begin: \{
            end: \}
            patterns:
              - include: '#balanced-tokens'

          - include: '#literal'

          - name: balanced-token-identifier.swift
            match: |
              (?x)
              \b
              ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
              | `[_a-zA-Z][_a-zA-Z0-9]*`
              )
              \b
            captures:
                '1': {name: support.function.swift}

          - name: balanced-token-operator.swift
            match: |
              (?x)
              (?!/\*|\*/|//)
              ( [-/=+!*%<>&|^~?]+
              | \.\.<
              | \.\.+
              )
            captures:
                '1': {name: support.function.swift}

          - name: balanced-token-other.swift
            match: (?!\[|\]|[(){}]).

    attribute:
        patterns:
          - include: '#comment'

          - name: attribute.swift
            match: |
                (?x)
                @
                ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                | `[_a-zA-Z][_a-zA-Z0-9]*`
                )
                \s*
                (?!\()
            captures:
                '1': {name: support.type.attribute.swift}

          - name: attribute.swift
            begin: |
                (?x)
                @
                ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                | `[_a-zA-Z][_a-zA-Z0-9]*`
                )
                \s*
                \(
            beginCaptures:
                '1': {name: support.type.attribute.swift}
            end: \)
            patterns:
              - include: '#balanced-tokens'

    tuple-type:
        patterns:
          - name: keyword.other.swift
            match: \binout\b

          - match: ","

          - name: variable.parameter.typed.swift
            match: |
                (?x)
                \b
                ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                | `[_a-zA-Z][_a-zA-Z0-9]*`
                )
                \s*
                (?=:)
            captures:
                '1': {name: variable.parameter.type.swift}

          - include: '#type'

    type:
        patterns:
          - include: '#comment'

          - include: '#attribute'

          - name: array-type.swift
            begin: \[
            end: \]
            patterns:
              - include: '#type'
              - match: ":"

          - name: support.type.unit.swift
            match: \(\)

          - name: tuple-type.swift
            begin: \(
            end: \)
            patterns:
              - include: "#tuple-type"

          - name: generic-argument-clause.swift
            begin: "<"
            end: ">"
            patterns:
              - include: '#type'

          - name: keyword.arrow.swift
            match: ->

          - name: punctuation.type.optional.swift
            match: "[?!]"

          - name: protocol-composition-type.swift
            begin: \b(protocol)\s*<
            beginCaptures:
                '1': {name: keyword.other.swift}
            end: ">"
            patterns:
              - name: support.type.protocol.swift
                match: |
                    (?x)
                    \b
                    ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                    | `[_a-zA-Z][_a-zA-Z0-9]*`
                    )
                    \b
              - match: ","

          - name: support.type.metataype.swift
            match: \.(Type|Protocol)
            captures:
                '1': {name: keyword.other.swift}

          - name: support.type.identifier.swift
            match: |
                (?x)
                \b
                ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                | `[_a-zA-Z][_a-zA-Z0-9]*`
                )
                \b

    literal:
        patterns:
          - include: '#comment'

          - name: support.constant.boolean.swift
            match: \b(true|false)\b

          - name: support.constant.nil.swift
            match: \bnil\b

          - name: constant.numeric.swift
            match: |
                (?x)
                \b
                # specifically do not include negation here and instead treat it syntactically
                # as a prefix negation operator. this simplifies the grammar here
                ( 0b[01][_01]*                # binary-literal
                | 0o[0-7][_0-7]*              # octal-literal
                |
                  0x[0-9a-fA-F][_0-9a-fA-f]*  # hexadecimal-literal
                  (?:\.[0-9a-fA-F][_0-9a-fA-f]*)? # hexadecimal-fraction opt
                  (?:[pP][-+]?[0-9][_0-9]*)?  # hexadecimal-exponent opt
                |
                  [0-9][_0-9]*                # integer-literal
                  (?:\.[0-9][_0-9]*)?         # decimal-fraction opt
                  (?:[eE][-+]?[0-9][_0-9]*)?  # decimal-exponent opt
                )
                \b

          - name: string.quoted.swift
            begin: '"'
            beginCaptures:
                '0': {name: punctuation.string.begin.swift}
            end: '"'
            endCaptures:
                '0': {name: punctuation.string.end.swift}
            patterns:
              - name: constant.character.escape.swift
                match: \\[\\0tnr"']
              - name: constant.character.escape.swift
                match: \\u\{[0-9a-fA-F]+\}
              - begin: \\\(
                beginCaptures:
                    '0': {name: constant.character.interpolation.swift}
                end: \)
                endCaptures:
                    '0': {name: constant.character.interpolation.swift}
                patterns:
                  - include: '#expression'

    statement:
        patterns:
          - match: ";"

          - include: '#comment'

          - name: keyword.return.swift
            match: \breturn\b

          - name: for-statement.swift
            match: |
                (?x)
                \b(for)
                (?!.*\bin\b)
            captures:
                '1': {name: keyword.for.swift}

          - name: for-in-statement.swift
            begin: \b(for)\s+
            beginCaptures:
                '1': {name: keyword.for.swift}
            end: \b(in)\b
            endCaptures:
                '1': {name: keyword.in.swift}
            patterns:
              - include: '#identifier-pattern'

          - name: keyword.while.swift
            match: \bwhile\b

          - name: do-while-statement.swift
            begin: \b(do)\s+
            beginCaptures:
                '1': {name: keyword.do.swift}
            end: \b(while)\b
            endCaptures:
                '1': {name: keyword.while.swift}
            patterns:
              - begin: \{
                end: \}
                patterns:
                  - include: '#statement'

          - name: if-statement.swift
            begin: \b(if)\s+
            beginCaptures:
                '1': {name: keyword.if.swift}
            end: (?<=\})
            patterns:
              - name: consequence-block.swift
                begin: \{
                end: \}
                patterns:
                  - include: '#statement'

              - name: if-expression-letvar.swift
                begin: \b(let|var)\s+
                beginCaptures:
                    '1': {name: keyword.letvar.swift}
                end: (?=\{)
                patterns:
                  - name: pattern-initializer.swift
                    begin: "="
                    end: "(?=[,{])"
                    patterns:
                      - include: '#expression'

                  - name: let-type-ascription.swift
                    begin: ":"
                    end: (?=[,=\{])|$
                    patterns:
                      - include: '#type'

                  - name: variable.swift
                    match: |
                        (?x)
                        \b
                        ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                        | `[_a-zA-Z][_a-zA-Z0-9]*`
                        )
                        \s*
                        (?=:)
                    captures:
                        '1': {name: variable.swift}

                  - include: '#pattern'


              - include: '#declaration'

              - include: '#expression'

          - name: keyword.else.swift
            match: \belse\b

          - name: switch-statement.swift
            begin: \b(switch)\s+
            beginCaptures:
                '1': {name: keyword.switch.swift}
            end: (?<=\})
            patterns:
              - name: body.switch.swift
                begin: \{
                end: \}
                patterns:
                  - name: clause.caseguard.swift
                    begin: \b(where)\b
                    beginCaptures:
                        '1': {name: keyword.where.swift}
                    end: (?=:)
                    patterns:
                      - include: '#expression'

                  - name: clause.casedefault.swift
                    match: '\b(default)(?=:)'
                    captures:
                        '1': {name: keyword.default.swift}

                  - name: clause.case.swift
                    begin: \b(case)\s+
                    beginCaptures:
                        '1': {name: keyword.case.swift}
                    end: (?=:|\bwhere\b)
                    patterns:
                      - include: '#pattern'

                  - name: clause.casebody.swift
                    begin: ":"
                    end: (?=\b(case|default)\b|\})
                    patterns:
                      - include: '#statement'

              - include: '#expression'

          - name: break-continue-statement.swift
            match: |
                (?x)
                \b
                (?:(break)|(continue))
                (?:
                    \s+
                    ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                    | `[_a-zA-Z][_a-zA-Z0-9]*`
                    )
                |   \b
                )
            captures:
                '1': {name: keyword.break.swift}
                '2': {name: keyword.continue.swift}
                '3': {name: identifier}

          - name: fallthrough-statement.swift
            match: \b(fallthrough)\b
            captures:
                '1': {name: keyword.fallthrough.swift}

          - name: labeled-statement.swift
            match: |
                (?x)
                ( \b[_a-zA-Z][_a-zA-Z0-9]*\b
                | `[_a-zA-Z][_a-zA-Z0-9]*`
                )
                \s*
                :
            captures:
                '1': {name: entity.name.tag}

          - include: '#declaration'

          - include: '#expression'
